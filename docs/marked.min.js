/*!
 * Simple Markdown Parser for Bible Reading Journey
 * Handles basic markdown features used in this application
 */
(function() {
  'use strict';
  
  const marked = {};
  
  marked.setOptions = function(options) {
    // Store options if needed (currently not used)
    marked.options = options || {};
  };
  
  marked.parse = function(markdown) {
    if (!markdown) return '';
    
    let html = markdown
      // Escape HTML entities first
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#x27;');
    
    // Headers
    html = html.replace(/^### (.*$)/gm, '<h3>$1</h3>');
    html = html.replace(/^## (.*$)/gm, '<h2>$1</h2>');
    html = html.replace(/^# (.*$)/gm, '<h1>$1</h1>');
    
    // Bold and italic
    html = html.replace(/\*\*\*(.*?)\*\*\*/g, '<strong><em>$1</em></strong>');
    html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    html = html.replace(/\*(.*?)\*/g, '<em>$1</em>');
    
    // Code blocks (triple backticks)
    html = html.replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>');
    
    // Inline code
    html = html.replace(/`([^`]+)`/g, '<code>$1</code>');
    
    // Blockquotes
    html = html.replace(/^&gt; (.*)$/gm, '<blockquote><p>$1</p></blockquote>');
    
    // Unordered lists
    html = html.replace(/^[\s]*\* (.*)$/gm, '<li>$1</li>');
    html = html.replace(/(<li>.*<\/li>)/gs, function(match) {
      return '<ul>' + match + '</ul>';
    });
    
    // Clean up multiple ul tags
    html = html.replace(/<\/ul>\s*<ul>/g, '');
    
    // Line breaks and paragraphs
    const lines = html.split('\n');
    const processedLines = [];
    let inList = false;
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      
      if (line === '') {
        processedLines.push('');
        continue;
      }
      
      // Check if line is already wrapped in HTML tags
      if (line.match(/^<(h[1-6]|ul|li|blockquote|pre|code)/)) {
        processedLines.push(line);
      } else {
        // Regular paragraph
        processedLines.push('<p>' + line + '</p>');
      }
    }
    
    html = processedLines.join('\n');
    
    // Clean up empty paragraphs and extra whitespace
    html = html.replace(/<p>\s*<\/p>/g, '');
    html = html.replace(/\n\s*\n/g, '\n');
    
    return html;
  };
  
  // Make marked available globally
  if (typeof window !== 'undefined') {
    window.marked = marked;
  }
  
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = marked;
  }
})();